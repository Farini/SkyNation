//
//  Recipes.swift
//  SkyTestSceneKit
//
//  Created by Farini on 10/29/20.
//  Copyright Â© 2020 Farini. All rights reserved.
//

import Foundation
import SwiftUI

/// **Recipe** names - recipes create a `Peripheral` or other objects
enum Recipe:String, Codable, CaseIterable, Hashable {
    
    case Module
    case Node
    
    // [Peripherals]
    case Condensator
    case ScrubberCO2
    case Electrolizer
    case Methanizer
    case Radiator
    case SolarPanel
    case Battery
    case StorageBox
    case tank
    case Roboarm
    case WaterFilter      // Transforms part of wasteLiquid back into water (or water vapor, to be easier)
    case BioSolidifier    // Transforms wasteSolid into fertilizer?
    
    // Cement
    case Cement
    // ChargedGlass
    case ChargedGlass
    // Alloy
    case Alloy
    
    // Mars Peripherals
    
    /// A Power Generator (Mars)
    case PowerGen
    case AirTrapper
    
    
    // E-Vehicle        bolt.car
    // MegaTank?        capsule.portrait
    // Polimer?         [see ingred.]
    // Solar Cell?      [see ingred.]
    
    /// Gets the ingredients for recipe
    func ingredients() -> [Ingredient:Int] {
        switch self {
            case .Module: return [.Aluminium:35, .Polimer:5]
            case .Node: return [.Aluminium:15]
            case .SolarPanel: return [.Polimer:3, .SolarCell:5]
            case .Condensator: return [.Aluminium:2, .Copper:1, .Polimer:1]
            case .ScrubberCO2: return [.Polimer:1, .Copper:1, .DCMotor:1]
            case .Electrolizer: return [.Polimer:4, .Copper:3, .Lithium:2]
            case .Methanizer: return [.Polimer:6, .Ceramic:2, .Circuitboard:1]
            case .Radiator: return [.Aluminium:6, .Ceramic:3, .Lithium:3]
            case .Battery: return [.Lithium:8, .Copper:4]
            case .StorageBox: return [.Polimer:5, .Aluminium:1]
            case .tank: return [.Aluminium:8, .Iron:1, .Polimer:1]
            case .Roboarm: return [.Circuitboard:4, .DCMotor:3, .Aluminium:8, .Polimer:16]
            case .WaterFilter: return [.Ceramic:3, .Copper:4, .Lithium:2, .Iron:2]
            case .BioSolidifier: return [.Ceramic:2, .Copper:4, .Sensor:1, .Iron:2]
                
            case .Cement: return [.Silica:4, .Polimer:2]
            case .ChargedGlass: return [.Polimer:10, .Silica:5, .Ceramic:4, .Lithium:4, .Sensor:3]
            case .Alloy: return [.Iron:10, .Aluminium:3, .CarbonFiber:5, .Lithium:2, .Copper:4]
            case .PowerGen: return [.Iron:10, .Aluminium:3, .Lithium:2, .Copper:4]
            case .AirTrapper: return [.Iron:10, .Aluminium:3, .Lithium:2, .Copper:4]
        }
    }
    
    /// A String that explains what this recipe does.
    var elaborate:String {
        switch self {
            case .Condensator: return "Astronauts sweat. The water vapor that comes from them merges with the air of the Space Station. This Peripheral condensates the water vapor in the air, and once the water is liquid again, it refills the water tanks."
            case .ScrubberCO2: return "As astronauts are breathingm they are releasing Carbon Dioxide (CO2) into the air. This Peripheral cleans the CO2 from the air, and stores it in a CO2 tank."
            case .Electrolizer: return "Makes electrolisys. It splits the H2O liquid water into Oxygen (O2) and Hydrogen (H2). If the Space Station doesn't have a hydrogen tank (with room for the new Hydrogen), the Hydrogen is thrown out. The Oxygen however, when it can't find an O2 Tank, is returned to the air."
            case .Methanizer: return "Transforms hydrogen (H2) and Carbon Dioxide (CO2) into methane (CH4)."
            case .Radiator: return "Maintains a nice and cozy temperature inside the Space Station. Astronauts heal faster and are more often happy, with enough radiators."
            case .SolarPanel: return "Generates power from the sun light, and recharges the batteries of the Space Station."
            case .Battery: return "Stores the energy generated by the solar panels, to be used when electricity is needed."
            case .BioSolidifier: return "Bio Solidifier is a Peripheral that transforms solid waste ðŸ’© into fertilizer, which feeds the plants. Occasionally, it may transform the same solid waste into Methane."
            case .tank: return "Makes an empty tank that can be used to store any gas, or water. Having some of those can be really handy when a Peripheral generates resources that may or may not be used right away."
            case .Alloy: return "Makes a Special Alloy needed for building special Peripherals, and upgrade some Outposts in the Mars colony."
            case .WaterFilter: return "Water Filter is a Peripheral that transforms liquid waste back into water. It is an essential tool, for the path towards sustainability. It may also save you some SkyCoins, once you don't need to order so much H2O."
            case .PowerGen: return "Generates Power, using Methane (CH4) and Oxygen (O2) for combustion."
            case .AirTrapper: return "Traps the CO2 from the Martian atmosphere."
            
            case .Cement: return "Makes a special type of glass that blocks radiation from the sun. It is used when upgrading some Outposts in the Mars colony."
            case .ChargedGlass: return "Makes a glueing mass needed for building special items, and upgrade some Outposts in the Mars colony."
                
            default: return "No information is given about this Recipe."
        }
    }
    
    /// Skills required
    func skillSet() -> [Skills:Int] {
        switch self {
            case .Module: return [.Material:1]
            case .Node: return [.Handy:1]
            case .SolarPanel: return [.Handy:2, .Electric:1]
            case .ScrubberCO2: return [.Material:1, .Handy:1]
            case .Methanizer: return [.Mechanic:1, .Electric:1]
            case .Radiator: return [.Material:1, .Mechanic:1]
            case .StorageBox: return [.Material:1]
            case .Roboarm: return [.Electric:1, .SystemOS:1, .Mechanic:2]
            case .WaterFilter: return [.Electric:1, .Mechanic:1, .Material:2]
            case .BioSolidifier: return [.Electric:1, .Mechanic:2, .Material:2]
            case .PowerGen: return [.Handy:1, .Electric:1]
            case .AirTrapper: return [.Handy:1, .Biologic:1, .SystemOS:1]
            default: return [.Handy:1]
        }
    }
    
    /// The time until the recipe is ready
    func getDuration() -> Int {
        
        switch self {
            
            case .Module: return 60 * 60 * 5        // 5h
            case .Node: return 60 * 30              // 30m
            case .SolarPanel: return 60 * 40        // 40m
            case .ScrubberCO2: return 60 * 60 * 2   // 2h
            case .Methanizer: return 60 * 60 * 3    // 3h
            case .Radiator: return 60 * 60 * 1      // 1h
            case .StorageBox: return 60 * 20        // 20m
            case .Roboarm: return 60 * 60 * 6       // 6h
            case .WaterFilter: return 60 * 60 * 2   // 2h
            case .BioSolidifier: return 60 * 60 * 3 // 3h
            case .Battery: return 60 * 15           // 15m
            case .Condensator: return 60 * 5        // 5m
            case .Electrolizer: return 60 * 10      // 10m
            case .tank: return 60 * 60 * 2          // 2h
            
            case .Cement: return 60 * 2             // 2m
            case .ChargedGlass: return 60 * 60      // 1h
            case .Alloy: return 60 * 3              // 3m
            case .PowerGen: return 60 * 10          // 10m
            case .AirTrapper: return 60 * 60 * 6    // 6h
        }
    }
    
    /// Returns a String of Hours, Minutes, Seconds for the duration of this recipe
    func durationExtended() -> String {
        return TimeInterval(getDuration()).stringFromTimeInterval()
    }
    
    func makeProduct(argument:Any) -> Codable? {
        switch self {
        case .tank:
            if let string = argument as? String, let ttype:TankType = TankType(rawValue: string) {
                let tank:Tank = Tank(type:ttype)
                return tank
            }
        default: return nil
        }
        return nil
    }
    
    var image:Image {
        switch self {
            case .Condensator: return PeripheralObject(peripheral: .Condensator).getImage()!
            case .ScrubberCO2: return PeripheralObject(peripheral: .ScrubberCO2).getImage()!
            case .Electrolizer: return PeripheralObject(peripheral: .Electrolizer).getImage() ?? Image(systemName: "questionmark")
            case .Methanizer: return PeripheralObject(peripheral: .Methanizer).getImage() ?? Image(systemName: "questionmark")
            case .Radiator: return PeripheralObject(peripheral: .Radiator).getImage() ?? Image(systemName: "questionmark")
            case .SolarPanel: return PeripheralObject(peripheral: .solarPanel).getImage() ?? Image(systemName: "questionmark")
            case .Battery: return Image("carBattery")
            case .tank: return Image("Tank")
            case .WaterFilter: return PeripheralObject(peripheral: .WaterFilter).getImage()!
            case .BioSolidifier: return PeripheralObject(peripheral: .BioSolidifier).getImage()!
                
            case .Cement: return Ingredient.Cement.image() ?? Image(systemName: "questionmark")
            case .ChargedGlass: return Ingredient.Glass.image() ?? Image(systemName: "questionmark")
            case .Alloy: return Ingredient.Alloy.image() ?? Image(systemName: "questionmark")
            case .PowerGen: return Image(systemName: "power") // togglepower
            case .AirTrapper: return Image(systemName: "wind")
            default: return Image(systemName: "questionmark")
        }
    }
}

extension Recipe {
    
    static var marsCases:[Recipe] {
        // Recipes not included in Mars
        let excluded:Set<Recipe> = Set([Recipe.Module, Recipe.Node, Recipe.Roboarm])
        
        return Array(Set(Recipe.allCases).subtracting(excluded))
    }
}
